import { useState, useCallback } from 'react';

export const translations = {
  en: {
    appTitle: "Timetable Scheduler",
    globalSettings: "Global Settings",
    masterData: "Master Data",
    timetable: "Timetable",
    exams: "Exams",
    reports: "Reports",
    analytics: "Analytics",
    advanced: "Advanced",
    administration: "Administration",
    institution: "Institution",
    academicCalendar: "Academic Calendar",
    timeSlots: "Time Slots",
    teachers: "Teachers",
    classes: "Classes",
    subjects: "Subjects",
    rooms: "Rooms",
    events: "Events / Activities",
    manualEditor: "Manual Editor",
    aiScheduler: "AI Scheduler",
    conflicts: "Conflicts",
    examPeriods: "Exam Periods",
    subjectAssignments: "Subject Assignments",
    roomAllocation: "Room Allocation",
    invigilatorAssignment: "Invigilator Assignment",
    studentTimetableA: "Student Timetable",
    teacherTimetableB: "Teacher Timetable",
    examTimetable: "Exam Timetable",
    exportPrint: "Export / Print",
    printSettings: "Print Setting",
    dashboard: "Dashboard",
    teacherWorkload: "Teacher Workload Summary",
    conflictReports: "Conflict Reports",
    calendarIntegration: "Calendar Integration",
    importExport: "Import/Export",
    systemSettings: "System Settings",
    language: "Language",
    selectClass: "Select Class",
    selectTeacher: "Select Teacher",
    selectTeachers: "Select Teacher(s)",
    selectRoom: "Select Room",
    selectClassGrade: "Select Class/Grade",
    classView: "Class View",
    teacherView: "Teacher View",
    roomView: "Room View",
    period: "Period",
    printExportPDF: "Print / Export PDF",
    settingsSaved: "Settings saved successfully!",
    timeSlotSettings: "Time Slot & Workload Settings",
    daysPerWeek: "Days per Week",
    periodsPerDay: "Periods per Day",
    periodTimes: "Period Times",
    saveSettings: "Save Settings",
    editSchedule: "Edit Schedule Entry",
    addSchedule: "Add Schedule Entry",
    fillAllFields: "Please fill in all required fields.",
    fillHolidayFields: "Please provide both a date and a description for the holiday.",
    delete: "Delete",
    cancel: "Cancel",
    save: "Save",
    select: "Select",
    edit: "Edit",
    add: "Add",
    addNew: "Add New",
    teacher: "Teacher",
    class: "Class",
    subject: "Subject",
    room: "Room",
    event: "Event / Activity",
    addNewEvent: "Add New Event / Activity",
    entryType: "Entry Type",
    subjectClass: "Subject / Class",
    eventActivity: "Event / Activity",
    nameIsRequired: "Name is required.",
    subjectCodeIsRequired: "Subject Code is required.",
    id: "ID / Code",
    fullName: "Full Name",
    name: "First Name",
    lastName: "Last Name",
    prefix: "Prefix",
    department: "Department",
    gradeLevel: "Grade Level",
    advisors: "Advisors",
    homeroom: "Homeroom",
    conflictDetected: "Conflict Detected!",
    subjectCodeUnique: "Subject code must be unique.",
    actions: "Actions",
    underConstruction: "This feature is under construction. Please check back later!",
    semester: "Semester",
    academicYear: "Academic Year",
    classAdvisor: "Class Advisor(s)",
    day: "Day",
    subjectsStudied: "Subjects Studied Summary",
    subjectCode: "Subject Code",
    subjectName: "Subject Name",
    teacherInCharge: "Teacher-in-charge",
    deputyDirectorAcademic: "Deputy Director for Academic Affairs",
    schoolDirector: "School Director",
    teacherName: "Teacher Name",
    teacherCode: "Teacher Code",
    totalPeriods: "Total Periods",
    subjectsTaught: "Subjects Taught Summary",
    periodsPerWeek: "periods/week",
    unscheduledClasses: "Unscheduled Subjects",
    detailsSaved: "Institution details saved successfully!",
    institutionDetails: "Institution Details",
    institutionName: "Institution Name",
    institutionLogo: "Institution Logo",
    removeLogo: "Remove Logo",
    saveChanges: "Save Changes",
    calendarSaved: "Academic calendar saved successfully!",
    startDate: "Start Date",
    endDate: "End Date",
    holidaysEvents: "Holidays & Events",
    description: "Description",
    date: "Date",
    noHolidaysAdded: "No holidays have been added yet.",
    addHoliday: "Add Holiday",
    saveCalendar: "Save Calendar",
    importExportMasterData: "Import / Export Master Data",
    teachersData: "Teachers Data",
    classesData: "Classes Data",
    subjectsData: "Subjects Data",
    roomsData: "Rooms Data",
    eventsData: "Events / Activities Data",
    exportToCsv: "Export to CSV",
    importFromCsv: "Import from CSV",
    downloadTemplate: "Download Template",
    importWarning: "Warning: Importing will overwrite existing data of the same type.",
    importSuccess: "Successfully imported {count} records.",
    importError: "An error occurred during import. Please check the file format.",
    conflictReportDesc: "View a detailed report of all scheduling conflicts.",
    optional: "Optional",
    affectedTeachers: "Affected Teachers",
    affectedClasses: "Affected Classes",
    calculateWorkingHour: "Calculate in teacher's working hours",
    quickSchedule: "Quick Schedule",
    quickScheduleDesc: "For new events, you can assign a time slot to automatically create entries for all affected classes.",
    multipleTeachers: "Multiple Teachers",
    affectedTeachersAll: "All Teachers",
    affectedClassesAll: "All Classes",
    printSettingsTitle: "Print Settings",
    paperSize: "Paper Size",
    orientation: "Orientation",
    margins: "Margins (cm)",
    top: "Top",
    bottom: "Bottom",
    left: "Left",
    right: "Right",
    showInstitutionLogo: "Show Institution Logo on Reports",
    a4: "A4",
    letter: "Letter",
    portrait: "Portrait",
    landscape: "Landscape",
    fontFamily: "Font Family",
    sarabun: "TH Sarabun New",
    sansSerif: "Standard Sans-Serif",
    colorMode: "Color Mode",
    color: "Color",
    blackAndWhite: "Black & White",
    // Teacher Workload Report
    teacherWorkloadSummary: "Teacher Workload Summary",
    no: "No.",
    advisorFor: "Advisor For",
    subjectCodeName: "Subject Code / Name",
    periodsPerWeekShort: "Pds/Wk",
    gradeLevelShort: "Class(es)",
    numClassesShort: "# Cls",
    totalAcademicPeriods: "Total Teach Pds",
    totalAllPeriods: "Total All Pds",
    totalHoursWeek: "Total Hrs/Wk",
    workloadCheck: "Workload Check",
    onTrack: "On Track",
    belowStandard: "Below Standard",
    overloaded: "Overloaded",
    minutesPerPeriod: "Minutes per Period",
    standardWeeklyHours: "Standard Weekly Hours",
    workloadThresholds: "Workload Thresholds (Hours)",
    workloadThresholdsDesc: "Min and Max hours for 'On Track' status.",
    isAcademic: "Is Academic Subject",
    // Save/Load Data
    saveLoadData: "Save / Load Data",
    saveDataToFile: "Save Data to File",
    loadDataFromFile: "Load Data from File",
    saveDataDesc: "Save all current data (schedule, master data, settings) to a JSON file. This is useful for backups or transferring data.",
    loadDataDesc: "Load data from a previously saved JSON file. This will overwrite all current data in the application.",
    loadWarning: "Warning: This action is irreversible and will replace all existing timetable data.",
    loadSuccess: "Data loaded successfully!",
    loadError: "Failed to load data. The file may be corrupted or in the wrong format.",
    clearAllDataTitle: "Clear All Data",
    clearAllDataDesc: "Permanently delete all schedule, master data, and settings from the application. This action cannot be undone.",
    clearAllDataButton: "Clear All Data",
    clearDataConfirmation: "Are you sure you want to delete all data? This action is irreversible.",
    dataClearedSuccess: "All data has been cleared successfully.",
    copy: "Copy",
    copied: "Copied!",
    deputyDirectorSignature: "Deputy Director's Signature",
    schoolDirectorSignature: "School Director's Signature",
    removeSignature: "Remove Signature",
    capacity: "Capacity",
    capacityDesc: "Number of classes this room can hold simultaneously.",
    search: "Search",
    preview: "Preview",
    coreDetails: "Core Details",
    assignmentDetails: "Assignment",
    selectSubjectPlaceholder: "Select a subject...",
    selectClassPlaceholder: "Select a class...",
    selectTeacherPlaceholder: "Select teacher(s)...",
    selectRoomPlaceholder: "Select a room...",
    selectEventPlaceholder: "Select an event...",
    noMatchesFound: "No matches found",
    // Dashboard
    executiveSummary: "Executive Summary",
    recommendations: "Actionable Recommendations",
    teacherAnalysis: "Teacher-Centric Analysis",
    studentAnalysis: "Student-Centric Analysis",
    resourceAnalysis: "School-Wide & Resource Analysis",
    workloadDistribution: "Workload Distribution",
    consecutiveTeaching: "Consecutive Teaching Blocks",
    inefficientGaps: "Inefficient Free Periods",
    classroomMobility: "Classroom Mobility",
    cognitiveLoad: "Cognitive Load Balancing",
    optimalTiming: "Optimal Subject Timing",
    subjectPacing: "Weekly Subject Pacing",
    roomUtil: "Room Utilization",
    clashDetection: "Clash Detection",
    noIssuesFound: "No significant issues found.",
    busiestTeachers: "Busiest Teachers",
    leastBusyTeachers: "Least Busy Teachers",
    periods: "periods",
    departmentWorkload: "Department Workload",
    avg: "Avg",
    min: "Min",
    max: "Max",
    teachersWithFourConsecutive: "Teachers with 4+ Consecutive Periods",
    gaps: "gaps",
    dailyRoomChanges: "Avg. Daily Room Changes",
    highMobilityTeachers: "High-Mobility Teachers",
    consecutiveAcademicSubjects: "Classes with 3+ Consecutive Academic Subjects",
    academicBalance: "Academic/Non-Academic Balance Issues",
    morning: "Morning",
    afternoon: "Afternoon",
    academicTiming: "Academic Subject Timing (Morning vs. Afternoon)",
    coreSubjectDistribution: "Core Subject Distribution Across the Week",
    roomTypeUtilization: "Room Type Utilization",
    roomSpecificUtilization: "Room-Specific Utilization",
    overUtilized: "Over-Utilized Rooms (>90%)",
    underUtilized: "Under-Utilized Rooms (<40%)",
    noConflicts: "No scheduling conflicts (double bookings) were found.",
    conflictsFound: "Scheduling conflicts were found!",
    // Import validation
    importFailedValidation: "Import failed due to data validation errors:",
    importRowError: "Row {rowNum}: {errorMsg}",
    idMissing: "ID is missing.",
    teacherIdInvalid: "Teacher ID must start with 'T-'.",
    classIdInvalid: "Class ID must start with 'C-'.",
    eventIdInvalid: "Event ID must start with 'E-'.",
    roomIdInvalid: "Room ID must start with 'R-'.",
    subjectIdInvalid: "Subject ID must start with 'S-'.",
    teacherIdNotFound: "Teacher ID '{id}' not found.",
    classIdNotFound: "Class ID '{id}' not found.",
    roomIdNotFound: "Room ID '{id}' not found.",
    // Export/Print Filters
    filterByGrade: "Filter by Grade",
    filterByDepartment: "Filter by Department",
    allGrades: "All Grades",
    allDepartments: "All Departments",
    selectAllVisible: "Select All Visible",
    deselectAllVisible: "Deselect All Visible",
    connectionError: "Offline Mode. Your changes are saved locally.",
    retryConnection: "Retry",
    connectingToServer: "Connecting to server...",
    // Full Master Data Backup/Restore
    fullMasterData: "Full Master Data (Backup / Restore)",
    exportAllMasterData: "Export All as JSON",
    importAllMasterData: "Import All from JSON",
    importAllDesc: "Backup or restore all master data types (teachers, classes, etc.) in a single file.",
    importAllWarningTitle: "Overwrite All Master Data?",
    importAllWarningBody: "This will replace all existing teachers, classes, subjects, rooms, and events with the data from the file. This action cannot be undone. Are you sure you want to proceed?",
    importAllSuccess: "All master data imported successfully!",
    importAllError: "Failed to import master data. The file may be corrupt or in the wrong format.",
  },
  th: {
    appTitle: "โปรแกรมจัดตารางสอน",
    globalSettings: "ตั้งค่าโดยรวม",
    masterData: "ข้อมูลหลัก",
    timetable: "ตารางสอน",
    exams: "การสอบ",
    reports: "รายงาน",
    analytics: "การวิเคราะห์",
    advanced: "ขั้นสูง",
    administration: "การดูแลระบบ",
    institution: "ข้อมูลสถานศึกษา",
    academicCalendar: "ปฏิทินการศึกษา",
    timeSlots: "ช่วงเวลาและภาระงาน",
    teachers: "ครู",
    classes: "ชั้นเรียน",
    subjects: "วิชา",
    rooms: "ห้องเรียน",
    events: "กิจกรรม",
    manualEditor: "จัดตารางด้วยตนเอง",
    aiScheduler: "จัดตารางด้วย AI",
    conflicts: "ข้อขัดแย้ง",
    examPeriods: "ช่วงเวลาสอบ",
    subjectAssignments: "การจัดวิชาสอบ",
    roomAllocation: "การจัดห้องสอบ",
    invigilatorAssignment: "การจัดผู้คุมสอบ",
    studentTimetableA: "ตารางสอนนักเรียน",
    teacherTimetableB: "ตารางสอนครู",
    examTimetable: "ตารางสอบ",
    exportPrint: "ส่งออก / พิมพ์",
    printSettings: "ตั้งค่าการพิมพ์",
    dashboard: "แดชบอร์ด",
    teacherWorkload: "สรุปภาระงานสอนของครู",
    conflictReports: "รายงานข้อขัดแย้ง",
    calendarIntegration: "เชื่อมต่อปฏิทิน",
    importExport: "นำเข้า/ส่งออกข้อมูล",
    systemSettings: "ตั้งค่าระบบ",
    language: "ภาษา",
    selectClass: "เลือกชั้นเรียน",
    selectTeacher: "เลือกครู",
    selectTeachers: "เลือกครู (หลายคน)",
    selectRoom: "เลือกห้อง",
    selectClassGrade: "เลือกชั้นเรียน/ระดับชั้น",
    classView: "มุมมองชั้นเรียน",
    teacherView: "มุมมองครู",
    roomView: "มุมมองห้อง",
    period: "คาบ",
    printExportPDF: "พิมพ์ / ส่งออก PDF",
    settingsSaved: "บันทึกการตั้งค่าเรียบร้อยแล้ว!",
    timeSlotSettings: "ตั้งค่าคาบเรียนและภาระงาน",
    daysPerWeek: "จำนวนวันต่อสัปดาห์",
    periodsPerDay: "จำนวนคาบต่อวัน",
    periodTimes: "เวลาของแต่ละคาบ",
    saveSettings: "บันทึกการตั้งค่า",
    editSchedule: "แก้ไขรายการสอน",
    addSchedule: "เพิ่มรายการสอน",
    fillAllFields: "กรุณากรอกข้อมูลที่จำเป็นให้ครบทุกช่อง",
    fillHolidayFields: "กรุณาระบุทั้งวันที่และคำอธิบายสำหรับวันหยุด",
    delete: "ลบ",
    cancel: "ยกเลิก",
    save: "บันทึก",
    select: "เลือก",
    edit: "แก้ไข",
    add: "เพิ่ม",
    addNew: "เพิ่มใหม่",
    teacher: "ครู",
    class: "ชั้นเรียน",
    subject: "วิชา",
    room: "ห้อง",
    event: "กิจกรรม",
    addNewEvent: "เพิ่มกิจกรรมใหม่",
    entryType: "ประเภทรายการ",
    subjectClass: "วิชา / ชั้นเรียน",
    eventActivity: "กิจกรรม",
    nameIsRequired: "จำเป็นต้องใส่ชื่อ",
    subjectCodeIsRequired: "จำเป็นต้องใส่รหัสวิชา",
    id: "รหัส",
    fullName: "ชื่อ-นามสกุล",
    name: "ชื่อ",
    lastName: "นามสกุล",
    prefix: "คำนำหน้า",
    department: "กลุ่มสาระการเรียนรู้",
    gradeLevel: "ระดับชั้น",
    advisors: "ครูที่ปรึกษา",
    homeroom: "ห้องเรียนประจำ",
    conflictDetected: "ตรวจพบข้อขัดแย้ง!",
    subjectCodeUnique: "รหัสวิชาต้องไม่ซ้ำกัน",
    actions: "การกระทำ",
    underConstruction: "ฟีเจอร์นี้อยู่ระหว่างการพัฒนา กรุณาตรวจสอบอีกครั้งในภายหลัง!",
    semester: "ภาคเรียนที่",
    academicYear: "ปีการศึกษา",
    classAdvisor: "ครูที่ปรึกษา",
    day: "วัน",
    subjectsStudied: "สรุปรายวิชาที่เรียน",
    subjectCode: "รหัสวิชา",
    subjectName: "ชื่อวิชา",
    teacherInCharge: "ครูผู้สอน",
    deputyDirectorAcademic: "รองผู้อำนวยการกลุ่มบริหารวิชาการ",
    schoolDirector: "ผู้อำนวยการสถานศึกษา",
    teacherName: "ชื่อครู",
    teacherCode: "รหัสครู",
    totalPeriods: "จำนวนคาบทั้งหมด",
    subjectsTaught: "สรุปรายวิชาที่สอน",
    periodsPerWeek: "คาบ/สัปดาห์",
    unscheduledClasses: "วิชาที่ยังไม่ได้จัด",
    detailsSaved: "บันทึกข้อมูลสถานศึกษาเรียบร้อยแล้ว!",
    institutionDetails: "ข้อมูลสถานศึกษา",
    institutionName: "ชื่อสถานศึกษา",
    institutionLogo: "โลโก้สถานศึกษา",
    removeLogo: "ลบโลโก้",
    saveChanges: "บันทึกการเปลี่ยนแปลง",
    calendarSaved: "บันทึกปฏิทินการศึกษาเรียบร้อยแล้ว!",
    startDate: "วันเริ่มต้น",
    endDate: "วันสิ้นสุด",
    holidaysEvents: "วันหยุดและกิจกรรม",
    description: "คำอธิบาย",
    date: "วันที่",
    noHolidaysAdded: "ยังไม่มีการเพิ่มวันหยุด",
    addHoliday: "เพิ่มวันหยุด",
    saveCalendar: "บันทึกปฏิทิน",
    importExportMasterData: "นำเข้า / ส่งออกข้อมูลหลัก",
    teachersData: "ข้อมูลครู",
    classesData: "ข้อมูลชั้นเรียน",
    subjectsData: "ข้อมูลวิชา",
    roomsData: "ข้อมูลห้องเรียน",
    eventsData: "ข้อมูลกิจกรรม",
    exportToCsv: "ส่งออกเป็น CSV",
    importFromCsv: "นำเข้าจาก CSV",
    downloadTemplate: "ดาวน์โหลดเทมเพลต",
    importWarning: "คำเตือน: การนำเข้าจะเขียนทับข้อมูลที่มีอยู่ประเภทเดียวกัน",
    importSuccess: "นำเข้าข้อมูล {count} รายการสำเร็จ",
    importError: "เกิดข้อผิดพลาดระหว่างการนำเข้า กรุณาตรวจสอบรูปแบบไฟล์",
    conflictReportDesc: "ดูรายงานโดยละเอียดของข้อขัดแย้งในการจัดตารางทั้งหมด",
    optional: "ไม่บังคับ",
    affectedTeachers: "ครูที่เกี่ยวข้อง",
    affectedClasses: "ชั้นเรียนที่เกี่ยวข้อง",
    calculateWorkingHour: "นับเป็นชั่วโมงทำงานของครู",
    quickSchedule: "จัดตารางด่วน",
    quickScheduleDesc: "สำหรับกิจกรรมใหม่ คุณสามารถกำหนดช่องเวลาเพื่อสร้างรายการในตารางสำหรับทุกชั้นเรียนที่เกี่ยวข้องโดยอัตโนมัติ",
    multipleTeachers: "ครูหลายคน",
    affectedTeachersAll: "ครูทั้งหมด",
    affectedClassesAll: "ชั้นเรียนทั้งหมด",
    printSettingsTitle: "ตั้งค่าการพิมพ์",
    paperSize: "ขนาดกระดาษ",
    orientation: "การวางแนว",
    margins: "ระยะขอบ (ซม.)",
    top: "บน",
    bottom: "ล่าง",
    left: "ซ้าย",
    right: "ขวา",
    showInstitutionLogo: "แสดงโลโก้สถานศึกษาในรายงาน",
    a4: "A4",
    letter: "Letter",
    portrait: "แนวตั้ง",
    landscape: "แนวนอน",
    fontFamily: "รูปแบบตัวอักษร",
    sarabun: "สารบรรณใหม่ (TH Sarabun New)",
    sansSerif: "ฟอนต์มาตรฐาน (ไม่มีหัว)",
    colorMode: "โหมดสี",
    color: "สี",
    blackAndWhite: "ขาวดำ",
    // Teacher Workload Report
    teacherWorkloadSummary: "สรุปชั่วโมงปฏิบัติงานตามตารางสอน",
    no: "ที่",
    advisorFor: "ครูที่ปรึกษา",
    subjectCodeName: "รหัสวิชา / ชื่อรายวิชา",
    periodsPerWeekShort: "คาบ/สัปดาห์",
    gradeLevelShort: "ระดับชั้น",
    numClassesShort: "จำนวนห้อง",
    totalAcademicPeriods: "รวมคาบที่สอน",
    totalAllPeriods: "รวมคาบทั้งหมด",
    totalHoursWeek: "รวมชั่วโมง/สัปดาห์",
    workloadCheck: "ตรวจสอบชั่วโมงตามตารางสอน",
    onTrack: "ตามเกณฑ์",
    belowStandard: "ต่ำกว่าเกณฑ์",
    overloaded: "สูงกว่าเกณฑ์",
    minutesPerPeriod: "จำนวนนาทีต่อคาบเรียน",
    standardWeeklyHours: "ชั่วโมงทำงานมาตรฐานต่อสัปดาห์",
    workloadThresholds: "เกณฑ์ชั่วโมงสอน (ชั่วโมง)",
    workloadThresholdsDesc: "ค่าต่ำสุดและสูงสุดสำหรับสถานะ 'ตามเกณฑ์'",
    isAcademic: "เป็นรายวิชาเชิงวิชาการ",
    // Save/Load Data
    saveLoadData: "บันทึก / โหลดข้อมูล",
    saveDataToFile: "บันทึกข้อมูลเป็นไฟล์",
    loadDataFromFile: "โหลดข้อมูลจากไฟล์",
    saveDataDesc: "บันทึกข้อมูลปัจจุบันทั้งหมด (ตารางสอน, ข้อมูลหลัก, การตั้งค่า) ลงในไฟล์ JSON สำหรับการสำรองข้อมูลหรือถ่ายโอน",
    loadDataDesc: "โหลดข้อมูลจากไฟล์ JSON ที่บันทึกไว้ก่อนหน้านี้ การดำเนินการนี้จะเขียนทับข้อมูลปัจจุบันทั้งหมดในแอปพลิเคชัน",
    loadWarning: "คำเตือน: การกระทำนี้ไม่สามารถย้อนกลับได้และจะแทนที่ข้อมูลตารางสอนที่มีอยู่ทั้งหมด",
    loadSuccess: "โหลดข้อมูลสำเร็จ!",
    loadError: "ไม่สามารถโหลดข้อมูลได้ ไฟล์อาจเสียหายหรือมีรูปแบบไม่ถูกต้อง",
    clearAllDataTitle: "ล้างข้อมูลทั้งหมด",
    clearAllDataDesc: "ลบข้อมูลตารางสอน, ข้อมูลหลัก, และการตั้งค่าทั้งหมดออกจากแอปพลิเคชันอย่างถาวร การกระทำนี้ไม่สามารถย้อนกลับได้",
    clearAllDataButton: "ล้างข้อมูลทั้งหมด",
    clearDataConfirmation: "คุณแน่ใจหรือไม่ว่าต้องการลบข้อมูลทั้งหมด? การกระทำนี้ไม่สามารถย้อนกลับได้",
    dataClearedSuccess: "ข้อมูลทั้งหมดถูกล้างเรียบร้อยแล้ว",
    copy: "คัดลอก",
    copied: "คัดลอกแล้ว!",
    deputyDirectorSignature: "ลายเซ็นรองผู้อำนวยการฯ",
    schoolDirectorSignature: "ลายเซ็นผู้อำนวยการฯ",
    removeSignature: "ลบลายเซ็น",
    capacity: "ความจุ",
    capacityDesc: "จำนวนชั้นเรียนที่สามารถใช้ห้องนี้ได้ในเวลาเดียวกัน",
    search: "ค้นหา",
    preview: "ตัวอย่าง",
    coreDetails: "รายละเอียดหลัก",
    assignmentDetails: "การกำหนด",
    selectSubjectPlaceholder: "เลือกวิชา...",
    selectClassPlaceholder: "เลือกชั้นเรียน...",
    selectTeacherPlaceholder: "เลือกครู...",
    selectRoomPlaceholder: "เลือกห้อง...",
    selectEventPlaceholder: "เลือกกิจกรรม...",
    noMatchesFound: "ไม่พบรายการที่ตรงกัน",
    // Dashboard
    executiveSummary: "สรุปสำหรับผู้บริหาร",
    recommendations: "ข้อเสนอแนะเชิงปฏิบัติ",
    teacherAnalysis: "การวิเคราะห์ด้านครูผู้สอน",
    studentAnalysis: "การวิเคราะห์ด้านนักเรียน",
    resourceAnalysis: "การวิเคราะห์ภาพรวมและทรัพยากร",
    workloadDistribution: "การกระจายภาระงาน",
    consecutiveTeaching: "การสอนต่อเนื่อง",
    inefficientGaps: "คาบว่างที่ไม่เกิดประโยชน์",
    classroomMobility: "การย้ายห้องเรียน",
    cognitiveLoad: "ภาระการเรียนรู้ของนักเรียน",
    optimalTiming: "ช่วงเวลาที่เหมาะสมของวิชา",
    subjectPacing: "การกระจายวิชาในสัปดาห์",
    roomUtil: "การใช้ห้องเรียน",
    clashDetection: "การตรวจจับข้อขัดแย้ง",
    noIssuesFound: "ไม่พบประเด็นสำคัญที่ต้องแก้ไข",
    busiestTeachers: "ครูที่มีภาระงานสูงสุด",
    leastBusyTeachers: "ครูที่มีภาระงานน้อยที่สุด",
    periods: "คาบ",
    departmentWorkload: "ภาระงานของกลุ่มสาระฯ",
    avg: "เฉลี่ย",
    min: "ต่ำสุด",
    max: "สูงสุด",
    teachersWithFourConsecutive: "ครูที่สอน 4 คาบขึ้นไปติดต่อกัน",
    gaps: "ช่องว่าง",
    dailyRoomChanges: "เฉลี่ยการย้ายห้องต่อวัน",
    highMobilityTeachers: "ครูที่ย้ายห้องบ่อย",
    consecutiveAcademicSubjects: "ชั้นเรียนที่มีวิชาหลัก 3 คาบขึ้นไปติดต่อกัน",
    academicBalance: "ปัญหาความสมดุลของวิชา",
    morning: "ช่วงเช้า",
    afternoon: "ช่วงบ่าย",
    academicTiming: "เวลาสอนของวิชาหลัก (เช้า vs บ่าย)",
    coreSubjectDistribution: "การกระจายวิชาหลักตลอดสัปดาห์",
    roomTypeUtilization: "การใช้ห้องเรียนตามประเภท",
    roomSpecificUtilization: "การใช้ห้องเรียนแต่ละห้อง",
    overUtilized: "ห้องที่ใช้งานมากเกินไป (>90%)",
    underUtilized: "ห้องที่ใช้งานน้อยเกินไป (<40%)",
    noConflicts: "ไม่พบข้อขัดแย้งในการจัดตาราง (การจองซ้อน)",
    conflictsFound: "พบข้อขัดแย้งในการจัดตาราง!",
    // Import validation
    importFailedValidation: "นำเข้าข้อมูลไม่สำเร็จเนื่องจากข้อผิดพลาดในการตรวจสอบความถูกต้อง:",
    importRowError: "แถวที่ {rowNum}: {errorMsg}",
    idMissing: "ไม่มีรหัส (ID)",
    teacherIdInvalid: "รหัสครูต้องขึ้นต้นด้วย 'T-'",
    classIdInvalid: "รหัสชั้นเรียนต้องขึ้นต้นด้วย 'C-'",
    eventIdInvalid: "รหัสกิจกรรมต้องขึ้นต้นด้วย 'E-'",
    roomIdInvalid: "รหัสห้องเรียนต้องขึ้นต้นด้วย 'R-'",
    subjectIdInvalid: "รหัสวิชาต้องขึ้นต้นด้วย 'S-'",
    teacherIdNotFound: "ไม่พบรหัสครู '{id}'",
    classIdNotFound: "ไม่พบรหัสชั้นเรียน '{id}'",
    roomIdNotFound: "ไม่พบรหัสห้อง '{id}'",
    // Export/Print Filters
    filterByGrade: "กรองตามระดับชั้น",
    filterByDepartment: "กรองตามกลุ่มสาระ",
    allGrades: "ทุกระดับชั้น",
    allDepartments: "ทุกกลุ่มสาระ",
    selectAllVisible: "เลือกทั้งหมดที่แสดง",
    deselectAllVisible: "ยกเลิกทั้งหมดที่แสดง",
    connectionError: "โหมดออฟไลน์ การเปลี่ยนแปลงของคุณถูกบันทึกไว้ในเครื่องแล้ว",
    retryConnection: "เชื่อมต่อ",
    connectingToServer: "กำลังเชื่อมต่อกับเซิร์ฟเวอร์...",
    // Full Master Data Backup/Restore
    fullMasterData: "ข้อมูลหลักทั้งหมด (สำรอง / กู้คืน)",
    exportAllMasterData: "ส่งออกทั้งหมดเป็น JSON",
    importAllMasterData: "นำเข้าทั้งหมดจาก JSON",
    importAllDesc: "สำรองหรือกู้คืนข้อมูลหลักทุกประเภท (ครู, ชั้นเรียน, ฯลฯ) ในไฟล์เดียว",
    importAllWarningTitle: "เขียนทับข้อมูลหลักทั้งหมดหรือไม่?",
    importAllWarningBody: "การดำเนินการนี้จะแทนที่ข้อมูลครู, ชั้นเรียน, วิชา, ห้องเรียน, และกิจกรรมที่มีอยู่ทั้งหมดด้วยข้อมูลจากไฟล์ ไม่สามารถย้อนกลับได้ คุณแน่ใจหรือไม่ที่จะดำเนินการต่อ?",
    importAllSuccess: "นำเข้าข้อมูลหลักทั้งหมดสำเร็จ!",
    importAllError: "ไม่สามารถนำเข้าข้อมูลหลักได้ ไฟล์อาจเสียหายหรือมีรูปแบบไม่ถูกต้อง",
  }
};

export type Language = keyof typeof translations;
export type TranslationKey = keyof typeof translations.en;

const LANGUAGE_STORAGE_KEY = 'timetableAppLanguage';

export const useLocalization = () => {
    const [language, setLanguageState] = useState<Language>(() => {
        try {
            const storedLang = localStorage.getItem(LANGUAGE_STORAGE_KEY);
            if (storedLang === 'en' || storedLang === 'th') {
                return storedLang;
            }
        } catch (error) {
            console.error('Failed to read language from localStorage', error);
        }
        return 'en';
    });

    const setLanguage = useCallback((lang: Language) => {
        try {
            localStorage.setItem(LANGUAGE_STORAGE_KEY, lang);
            setLanguageState(lang);
        } catch (error) {
            console.error('Failed to save language to localStorage', error);
        }
    }, []);

    const t = useCallback((key: TranslationKey, vars?: Record<string, string | number>) => {
        let translation = translations[language]?.[key] || translations.en[key];

        if (typeof translation !== 'string') {
            console.error(`Translation not found for key: ${key}`);
            return `[${key}]`; // Return key as fallback to prevent crash
        }
        
        if (vars) {
            Object.entries(vars).forEach(([varKey, value]) => {
                const regex = new RegExp(`\\{${varKey}\\}`, 'g');
                translation = translation.replace(regex, String(value));
            });
        }
        return translation;
    }, [language]);

    return { language, setLanguage, t };
};

const DAYS_OF_WEEK_EN = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
const DAYS_OF_WEEK_TH = ['จันทร์', 'อังคาร', 'พุธ', 'พฤหัสบดี', 'ศุกร์', 'เสาร์', 'อาทิตย์'];

export const getDaysOfWeek = (t: (key: TranslationKey, vars?: Record<string, string | number>) => string): string[] => {
    // Check if the translation for 'day' matches the Thai translation to determine the language.
    // This is a simple way to infer language without passing it down explicitly.
    if (t('day') === translations.th.day) {
        return DAYS_OF_WEEK_TH;
    }
    return DAYS_OF_WEEK_EN;
};